package com.bulbasaur.dat256.services.firebase;

import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.google.firebase.firestore.QuerySnapshot;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Nonnull;

/**
 * @author ludwighultqvist
 * a class that implements the Collection interface
 */
class Collection implements DBCollection {

    private CollectionReference collection;

    /**
     * package private constructor that initializes the object with a reference to the
     * firebase-collection from the given root.
     * an instance should not be able to be directly created from outside the package
     * @param root the root string
     */
    Collection(String root) {
        this(FirebaseFirestore.getInstance().collection(root));
    }

    /**
     * package private constructor that initializes the object with a given reference to a
     * firebase-collection.
     * an instance should not be able to be directly created from outside the package
     * @param collection the CollectionReference object
     */
    Collection(CollectionReference collection) {
        this.collection = collection;
    }

    @Override
    public DBDocument create(String id, RequestListener<DBDocument> listener) {
        DBDocument document;

        if (id == null) {
            document = new Document(collection.document(), listener);
        }
        else {
            document = new Document(collection.document(id), listener);
        }

        return document;
    }

    /**
     * creates a new document in the collection with a given id (should be generated)
     * @param id the given id string
     * @return a new DBDocument object
     */
    @Override
    public DBDocument create(String id) {
        return create(id, null);
    }

    @Override
    public DBDocument create(RequestListener<DBDocument> listener) {
        return create(null, listener);
    }

    /**
     * creates a new document in the collection with an autogenerated id
     * @return a new DBDocument object
     */
    @Override
    public DBDocument create() {
        return create(null, null);
    }

    @Override
    public DBDocument get(String id, RequestListener<DBDocument> listener) {
        Document result = new Document();

        collection.document(id).get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        DocumentSnapshot snapshot = task.getResult();
                        if (snapshot != null && snapshot.exists()) {
                            result.init(snapshot.getReference(), listener);

                            if (listener != null) {
                                listener.onSuccess(result);
                            }
                        }
                        else if (listener != null) {
                            listener.onComplete(result);
                        }
                    }
                    else if (listener != null) {
                        listener.onComplete(result);
                    }
                })
                .addOnFailureListener(e -> {
                    if (listener != null) {
                        listener.onFailure(result);
                    }
                });

        return result;
    }

    /**
     * fetches a document with the given id from the collection in the database.
     * if no document is found, null is returned
     * @param id the given id string
     * @return the DBDocument found
     */
    @Override
    public DBDocument get(String id) {
        return get(id, null);
    }

    @Override
    public List<? extends DBDocument> all(RequestListener<List<? extends DBDocument>> listener) {
        List<Document> result = new ArrayList<>();

        collection.get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        QuerySnapshot snapshot = task.getResult();
                        if (snapshot != null) {
                            for (DocumentSnapshot document : snapshot.getDocuments()) {
                                result.add(new Document(document.getReference(), null));
                            }

                            if (listener != null) {
                                listener.onSuccess(result);
                            }
                        }
                        else if (listener != null) {
                            listener.onComplete(result);
                        }
                    }
                    else if (listener != null) {
                        listener.onComplete(result);
                    }
                })
                .addOnFailureListener(e -> {
                    if (listener != null) {
                        listener.onFailure(result);
                    }
                });
        return result;
    }

    /**
     * fetches and returns a list of all documents from the collection in the database
     * @return the list of DBDocument objects
     */
    @Override
    public List<? extends DBDocument> all() {
        return all(null);
    }

    @Override
    public List<? extends DBDocument> search(List<QueryFilter> filters, RequestListener<List<? extends DBDocument>> listener) {
        Query query = collection;
        List<Document> result = new ArrayList<>();

        for (QueryFilter filter : filters) {
            switch (filter.getComparison()) {
                case "=":
                    query = query.whereEqualTo(filter.getField(), filter.getValue());
                    break;
                case "<":
                    query = query.whereLessThan(filter.getField(), filter.getValue());
                    break;
                case ">":
                    query = query.whereGreaterThan(filter.getField(), filter.getValue());
                    break;
                default:
            }
        }

        query.get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        QuerySnapshot snapshot = task.getResult();

                        if (snapshot != null) {
                            for (DocumentSnapshot document : snapshot.getDocuments()) {
                                result.add(new Document(document.getReference(), null));
                            }
                        }

                        if (listener != null) {
                            listener.onSuccess(result);
                        }
                    }
                    else if (listener != null) {
                        listener.onComplete(result);
                    }
                })
                .addOnFailureListener(e -> {
                    if (listener != null) {
                        listener.onFailure(result);
                    }
                });

        return result.isEmpty() ? null : result;
    }

    @Override
    public List<? extends DBDocument> search(List<QueryFilter> filters) {
        return search(filters, null);
    }

    @Override
    public List<? extends DBDocument> search(QueryFilter filter, RequestListener<List<? extends DBDocument>> listener) {
        List<QueryFilter> filters = new LinkedList<>();
        filters.add(filter);
        return search(filters, listener);
    }

    @Override
    public List<? extends DBDocument> search(QueryFilter filter) {
        return search(filter, null);
    }
}
